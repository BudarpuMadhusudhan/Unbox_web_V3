function cov_2pilxu5qco(){var path="C:\\Users\\User\\Desktop\\Unbox\\wdio.conf.js";var hash="f3ab8bd3c285cf49094f64789d1c0d15c31738c3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\User\\Desktop\\Unbox\\wdio.conf.js",statementMap:{"0":{start:{line:1,column:24},end:{line:1,column:73}},"1":{start:{line:2,column:27},end:{line:2,column:61}},"2":{start:{line:3,column:12},end:{line:3,column:29}},"3":{start:{line:4,column:14},end:{line:4,column:38}},"4":{start:{line:5,column:15},end:{line:5,column:42}},"5":{start:{line:6,column:15},end:{line:6,column:37}},"6":{start:{line:7,column:0},end:{line:34,column:3}},"7":{start:{line:36,column:0},end:{line:406,column:1}},"8":{start:{line:246,column:31},end:{line:254,column:10}},"9":{start:{line:255,column:8},end:{line:255,column:33}},"10":{start:{line:256,column:8},end:{line:256,column:51}},"11":{start:{line:259,column:8},end:{line:261,column:13}},"12":{start:{line:260,column:12},end:{line:260,column:57}},"13":{start:{line:314,column:8},end:{line:314,column:31}},"14":{start:{line:315,column:8},end:{line:315,column:31}},"15":{start:{line:316,column:8},end:{line:316,column:49}},"16":{start:{line:346,column:21},end:{line:346,column:36}},"17":{start:{line:347,column:8},end:{line:351,column:9}},"18":{start:{line:348,column:29},end:{line:348,column:81}},"19":{start:{line:349,column:12},end:{line:349,column:45}},"20":{start:{line:350,column:12},end:{line:350,column:54}},"21":{start:{line:352,column:8},end:{line:352,column:38}},"22":{start:{line:395,column:8},end:{line:397,column:13}},"23":{start:{line:396,column:12},end:{line:396,column:50}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:244,column:15},end:{line:244,column:16}},loc:{start:{line:244,column:47},end:{line:257,column:5}},line:244},"1":{name:"(anonymous_1)",decl:{start:{line:258,column:16},end:{line:258,column:17}},loc:{start:{line:258,column:67},end:{line:262,column:5}},line:258},"2":{name:"(anonymous_2)",decl:{start:{line:259,column:9},end:{line:259,column:10}},loc:{start:{line:259,column:21},end:{line:261,column:9}},line:259},"3":{name:"(anonymous_3)",decl:{start:{line:313,column:17},end:{line:313,column:18}},loc:{start:{line:313,column:40},end:{line:317,column:5}},line:313},"4":{name:"(anonymous_4)",decl:{start:{line:345,column:15},end:{line:345,column:16}},loc:{start:{line:345,column:92},end:{line:353,column:5}},line:345},"5":{name:"(anonymous_5)",decl:{start:{line:394,column:16},end:{line:394,column:17}},loc:{start:{line:394,column:67},end:{line:398,column:5}},line:394},"6":{name:"(anonymous_6)",decl:{start:{line:395,column:9},end:{line:395,column:10}},loc:{start:{line:395,column:21},end:{line:397,column:9}},line:395}},branchMap:{"0":{loc:{start:{line:347,column:8},end:{line:351,column:9}},type:"if",locations:[{start:{line:347,column:8},end:{line:351,column:9}},{start:{line:347,column:8},end:{line:351,column:9}}],line:347}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f3ab8bd3c285cf49094f64789d1c0d15c31738c3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2pilxu5qco=function(){return actualCoverage;};}return actualCoverage;}cov_2pilxu5qco();const workflowLibrary=(cov_2pilxu5qco().s[0]++,require('./test/workflowLibrary/workflowLibrary'));let{ReportAggregator}=(cov_2pilxu5qco().s[1]++,require('wdio-html-nice-reporter'));const LOG=(cov_2pilxu5qco().s[2]++,require('log4js'));let logger2=(cov_2pilxu5qco().s[3]++,LOG.getLogger("default"));const Logger=(cov_2pilxu5qco().s[4]++,require('./test/logger.js'));const expect=(cov_2pilxu5qco().s[5]++,require('chai').expect);cov_2pilxu5qco().s[6]++;LOG.configure({appenders:{fileLog:{type:'file',filename:"./test/logs/html-reporter.log",maxLogSize:5000000,level:'debug'},'out':{type:'stdout',layout:{type:"colored"}},'filterOut':{type:'stdout',layout:{type:"colored"},level:'info'}},categories:{file:{appenders:['fileLog'],level:'info'},default:{appenders:['out','fileLog'],level:'info'},console:{appenders:['out'],level:'info'}}});cov_2pilxu5qco().s[7]++;exports.config={//
// ====================
// Runner Configuration
// ====================
//
//
// ==================
// Specify Test Files
// ==================
// Define which test specs should run. The pattern is relative to the directory
// from which `wdio` was called.
//
// The specs are defined as an array of spec files (optionally using wildcards
// that will be expanded). The test for each spec file will be run in a separate
// worker process. In order to have a group of spec files run in the same worker
// process simply enclose them in an array within the specs array.
//
// If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),
// then the current working directory is where your `package.json` resides, so `wdio`
// will be called from there.
//
specs:['./test/specs/**/*.js'],suites:{smoke:["./test/specs/smokeScripts/TC_Myteam_02.js","./test/specs/smokeScripts/TC_Reports_01.js","./test/specs/smokeScripts/TC_SystemControl_02.js"],regression:[],myTeamModule:["./test/specs/smokeScripts/TC_Myteam_02.js"],reportsModule:["./test/specs/smokeScripts/TC_Reports_01.js"],systemControlModule:["./test/specs/smokeScripts/TC_SystemControl_02.js"]},// Patterns to exclude.
exclude:[// 'path/to/excluded/files'
],//
// ============
// Capabilities
// ============
// Define your capabilities here. WebdriverIO can run multiple capabilities at the same
// time. Depending on the number of capabilities, WebdriverIO launches several test
// sessions. Within your capabilities you can overwrite the spec and exclude options in
// order to group specific specs to a specific capability.
//
// First, you can define how many instances should be started at the same time. Let's
// say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have
// set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec
// files and you set maxInstances to 10, all spec files will get tested at the same time
// and 30 processes will get spawned. The property handles how many capabilities
// from the same test should run tests.
//
maxInstances:10,//
// If you have trouble getting all important capabilities together, check out the
// Sauce Labs platform configurator - a great tool to configure your capabilities:
// https://saucelabs.com/platform/platform-configurator
//
capabilities:[{// maxInstances can get overwritten per capability. So if you have an in-house Selenium
// grid with only 5 firefox instances available you can make sure that not more than
// 5 instances get started at a time.
maxInstances:1,browserName:'chrome','goog:chromeOptions':{excludeSwitches:['enable-automation'],prefs:{'profile.managed_default_content_settings.popups':1,'profile.managed_default_content_settings.notifications':1,'credentials_enable_service':false,'profile.password_manager_enabled':false}},acceptInsecureCerts:true// If outputDir is provided WebdriverIO can capture driver session logs
// it is possible to configure which logTypes to include/exclude.
// excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs
// excludeDriverLogs: ['bugreport', 'server'],
}// {
//     maxInstances: 1,
//     browserName: 'firefox',
//     acceptInsecureCerts: true
//     },
//     {
//         maxInstances: 1,
//         browserName: 'chromiumedge',
//         acceptInsecureCerts: true
//     }
],//
// ===================
// Test Configurations
// ===================
// Define all options that are relevant for the WebdriverIO instance here
//
// Level of logging verbosity: trace | debug | info | warn | error | silent
logLevel:'info',//
// Set specific log levels per logger
// loggers:
// - webdriver, webdriverio
// - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service
// - @wdio/mocha-framework, @wdio/jasmine-framework
// - @wdio/local-runner
// - @wdio/sumologic-reporter
// - @wdio/cli, @wdio/config, @wdio/utils
// Level of logging verbosity: trace | debug | info | warn | error | silent
// logLevels: {
//     webdriver: 'info',
//     '@wdio/appium-service': 'info'
// },
//
// If you only want to run your tests until a specific amount of tests have failed use
// bail (default is 0 - don't bail, run all tests).
bail:0,//
// Set a base URL in order to shorten url command calls. If your `url` parameter starts
// with `/`, the base url gets prepended, not including the path portion of your baseUrl.
// If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
// gets prepended directly.
baseUrl:'',//
// Default timeout for all waitFor* commands.
waitforTimeout:10000,//
// Default timeout in milliseconds for request
// if browser driver or grid doesn't send response
connectionRetryTimeout:120000,//
// Default request retries count
connectionRetryCount:3,//
// Test runner services
// Services take over a specific job you don't want to take care of. They enhance
// your test setup with almost no effort. Unlike plugins, they don't add new
// commands. Instead, they hook themselves up into the test process.
services:['selenium-standalone'],// Framework you want to run your specs with.
// The following are supported: Mocha, Jasmine, and Cucumber
// see also: https://webdriver.io/docs/frameworks
//
// Make sure you have the wdio adapter package for the specific framework installed
// before running any tests.
framework:'mocha',//
// The number of times to retry the entire specfile when it fails as a whole
// specFileRetries: 1,
//
// Delay in seconds between the spec file retry attempts
// specFileRetriesDelay: 0,
//
// Whether or not retried specfiles should be retried immediately or deferred to the end of the queue
// specFileRetriesDeferred: false,
//
// Test reporter for stdout.
// The only one supported by default is 'dot'
// see also: https://webdriver.io/docs/dot-reporter
reporters:['spec',["html-nice",{debug:true,outputDir:'./test/reports/',filename:'Report.html',reportTitle:'Test Execution Report',showInBrowser:true,useOnAfterCommandForScreenshot:false,linkScreenshots:true,LOG:logger2,collapseTests:true,collapseSuites:true}]],// reporters: [
//     [video, {
//       saveAllVideos: false,       // If true, also saves videos for successful test cases
//       videoSlowdownMultiplier: 1, // Higher to get slower videos, lower for faster videos [Value 1-100]
//     }],
//     ['allure', {
//       outputDir: './allure-results', //here change the path to './allure-results'
//       disableWebdriverStepsReporting: true,
//       disableWebdriverScreenshotsReporting: false,
//     }],
//   ],
//
// Options to be passed to Mocha.
// See the full list at http://mochajs.org/
mochaOpts:{ui:'bdd',timeout:60000},//
// =====
// Hooks
// =====
// WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance
// it and to build services around it. You can either apply a single function or an array of
// methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got
// resolved to continue.
/**
     * Gets executed once before all workers get launched.
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     */ // onPrepare: function (config, capabilities) {
// },
onPrepare:function(config,capabilities){cov_2pilxu5qco().f[0]++;let reportAggregator=(cov_2pilxu5qco().s[8]++,new ReportAggregator({outputDir:'./test/reports/',filename:'Finalreport.html',reportTitle:'Test Execution Report',// browserName: browsers,
showInBrowser:true,collapseTests:true,LOG:logger2}));cov_2pilxu5qco().s[9]++;reportAggregator.clean();cov_2pilxu5qco().s[10]++;global.reportAggregator=reportAggregator;},onComplete:function(exitCode,config,capabilities,results){cov_2pilxu5qco().f[1]++;cov_2pilxu5qco().s[11]++;(async()=>{cov_2pilxu5qco().f[2]++;cov_2pilxu5qco().s[12]++;await global.reportAggregator.createReport();})();},/**
     * Gets executed before a worker process is spawned and can be used to initialise specific service
     * for that worker as well as modify runtime environments in an async fashion.
     * @param  {String} cid      capability id (e.g 0-0)
     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker
     * @param  {[type]} specs    specs to be run in the worker process
     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized
     * @param  {[type]} execArgv list of string arguments passed to the worker process
     */ // onWorkerStart: function (cid, caps, specs, args, execArgv) {
// },
/**
     * Gets executed just after a worker process has exited.
     * @param  {String} cid      capability id (e.g 0-0)
     * @param  {Number} exitCode 0 - success, 1 - fail
     * @param  {[type]} specs    specs to be run in the worker process
     * @param  {Number} retries  number of retries used
     */ // onWorkerEnd: function (cid, exitCode, specs, retries) {
// },
/**
     * Gets executed just before initialising the webdriver session and test framework. It allows you
     * to manipulate configurations depending on the capability or spec.
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that are to be run
     * @param {String} cid worker id (e.g. 0-0)
     */ // beforeSession: function (config, capabilities, specs, cid) {
// },
/**
     * Gets executed before test execution begins. At this point you can access to all global
     * variables like `browser`. It is the perfect place to define custom commands.
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs        List of spec file paths that are to be run
     * @param {Object}         browser      instance of created browser/device session
     */ // before: function (capabilities, specs) {
// },
/**
     * Runs before a WebdriverIO command gets executed.
     * @param {String} commandName hook command name
     * @param {Array} args arguments that command would receive
     */ // beforeCommand: function (commandName, args) {
// },
/**
     * Hook that gets executed before the suite starts
     * @param {Object} suite suite details
     */beforeSuite:async function(suite){cov_2pilxu5qco().f[3]++;cov_2pilxu5qco().s[13]++;global.Logger=Logger;cov_2pilxu5qco().s[14]++;global.expect=expect;cov_2pilxu5qco().s[15]++;await workflowLibrary.launchApplication();},/**
     * Function to be executed before a test (in Mocha/Jasmine) starts.
     */ // beforeTest: function (test, context) {
// },
/**
     * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling
     * beforeEach in Mocha)
     */ // beforeHook: function (test, context) {
// },
/**
     * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling
     * afterEach in Mocha)
     */ // afterHook: function (test, context, { error, result, duration, passed, retries }) {
// },
/**
     * Function to be executed after a test (in Mocha/Jasmine only)
     * @param {Object}  test             test object
     * @param {Object}  context          scope object the test was executed with
     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`
     * @param {Any}     result.result    return object of test function
     * @param {Number}  result.duration  duration of test
     * @param {Boolean} result.passed    true if test has passed, otherwise false
     * @param {Object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`
     */afterTest:async function(test,context,{error,result,duration,passed,retries}){cov_2pilxu5qco().f[4]++;const path=(cov_2pilxu5qco().s[16]++,require('path'));cov_2pilxu5qco().s[17]++;if(!passed){cov_2pilxu5qco().b[0][0]++;const filePath=(cov_2pilxu5qco().s[18]++,path.resolve('./test/reports/screenshots','sc.png'));cov_2pilxu5qco().s[19]++;browser.saveScreenshot(filePath);cov_2pilxu5qco().s[20]++;process.emit("test:screenshot",filePath);}else{cov_2pilxu5qco().b[0][1]++;}cov_2pilxu5qco().s[21]++;await workflowLibrary.logout();},/**
     * Hook that gets executed after the suite has ended
     * @param {Object} suite suite details
     */ // afterSuite: function (suite) {
// },
/**
     * Runs after a WebdriverIO command gets executed
     * @param {String} commandName hook command name
     * @param {Array} args arguments that command would receive
     * @param {Number} result 0 - command success, 1 - command error
     * @param {Object} error error object if any
     */ // afterCommand: function (commandName, args, result, error) {
// },
/**
     * Gets executed after all tests are done. You still have access to all global variables from
     * the test.
     * @param {Number} result 0 - test pass, 1 - test fail
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that ran
     */ // after: function (result, capabilities, specs) {
// },
/**
     * Gets executed right after terminating the webdriver session.
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that ran
     */ // afterSession: function (config, capabilities, specs) {
// },
/**
     * Gets executed after all workers got shut down and the process is about to exit. An error
     * thrown in the onComplete hook will result in the test run failing.
     * @param {Object} exitCode 0 - success, 1 - fail
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {<Object>} results object containing test results
     */onComplete:function(exitCode,config,capabilities,results){cov_2pilxu5qco().f[5]++;cov_2pilxu5qco().s[22]++;(async()=>{cov_2pilxu5qco().f[6]++;cov_2pilxu5qco().s[23]++;await reportAggregator.createReport();})();}/**
    * Gets executed when a refresh happens.
    * @param {String} oldSessionId session ID of the old session
    * @param {String} newSessionId session ID of the new session
    */ // onReload: function(oldSessionId, newSessionId) {
// }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,